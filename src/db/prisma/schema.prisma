// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Resource model to track all provisioned resources
model Resource {
  id          String   @id @default(uuid())
  name        String
  description String?
  provider    Provider
  type        String   // e.g., "EC2", "S3", "ComputeEngine"
  status      Status   @default(PENDING)
  config      Json     // Configuration for the resource
  metadata    Json?    // Additional metadata about the resource
  resourceId  String?  // ID of the resource in the cloud provider
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]
  // Template deployment relationship
  deploymentId String?
  deployment   Deployment? @relation(fields: [deploymentId], references: [id])
  // Region for failover support
  region      String?
}

// Job model to track background jobs
model Job {
  id         String    @id @default(uuid())
  resourceId String
  resource   Resource  @relation(fields: [resourceId], references: [id])
  type       JobType
  status     JobStatus @default(PENDING)
  result     Json?     // Result of the job
  error      String?   // Error message if job failed
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Template model for storing deployment templates
model Template {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String?
  version      String   @default("1.0.0")
  provider     Provider
  gitRepo      String?  // Git repository URL for Terraform modules
  gitBranch    String?  // Git branch for Terraform modules
  modulePath   String?  // Path to the Terraform module in the repository
  parameters   Json     // Parameter schema for the template
  resources    Json     // Resources to be created by this template
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deployments  Deployment[]
}

// Deployment model for tracking template-based deployments
model Deployment {
  id           String   @id @default(uuid())
  name         String
  description  String?
  templateId   String
  template     Template @relation(fields: [templateId], references: [id])
  parameters   Json     // Actual parameters used for this deployment
  status       Status   @default(PENDING)
  metadata     Json?    // Additional metadata about the deployment
  primaryRegion String  // Primary region for this deployment
  failoverRegion String? // Failover region for this deployment
  isFailover   Boolean  @default(false) // Whether this is a failover deployment
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resources    Resource[]
  jobs         DeploymentJob[]
}

// DeploymentJob model for tracking template deployment jobs
model DeploymentJob {
  id           String    @id @default(uuid())
  deploymentId String
  deployment   Deployment @relation(fields: [deploymentId], references: [id])
  type         JobType
  status       JobStatus @default(PENDING)
  result       Json?     // Result of the job
  error        String?   // Error message if job failed
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum Provider {
  AWS
  GCP
}

enum Status {
  PENDING
  CREATING
  ACTIVE
  UPDATING
  DELETING
  DELETED
  FAILED
}

enum JobType {
  CREATE
  UPDATE
  DELETE
  FAILOVER
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
